# Memcached Commands
#

module Memcached;

export type MemcachedMagicCode = enum {
    REQUEST  = 0x80,
    RESPONSE = 0x81
};

export type MemcachedOpCode = enum {
    GET                  = 0x00,
    SET                  = 0x01,
    ADD                  = 0x02,
    REPLACE              = 0x03,
    DELETE               = 0x04,
    INCREMENT            = 0x05,
    DECREMENT            = 0x06,
    QUIT                 = 0x07,
    FLUSH                = 0x08,
    GETQ                 = 0x09,
    NOOP                 = 0x0A,
    VERSION              = 0x0B,
    GETK                 = 0x0C,
    GETKQ                = 0x0D,
    APPEND               = 0x0E,
    PREPEND              = 0x0F,
    STAT                 = 0x10,
    SETQ                 = 0x11,
    ADDQ                 = 0x12,
    REPLACEQ             = 0x13,
    DELETEQ              = 0x14,
    INCREMENTQ           = 0x15,
    DECREMENTQ           = 0x16,
    QUITQ                = 0x17,
    FLUSHQ               = 0x18,
    APPENDQ              = 0x19,
    PREPENDQ             = 0x1A,
    VERBOSITY            = 0x1B,
    TOUCH                = 0x1C,
    GAT                  = 0x1D,
    GATQ                 = 0x1E,
    SASL_LIST_MECHS      = 0x20,
    SASL_AUTH            = 0x21,
    SASL_STEP            = 0x22,
    RGET                 = 0x30,
    RSET                 = 0x31,
    RSETQ                = 0x32,
    RAPPEND              = 0x33,
    RAPPENDQ             = 0x34,
    RPREPEND             = 0x35,
    RPREPENDQ            = 0x36,
    RDELETE              = 0x37,
    RDELETEQ             = 0x38,
    RINCR                = 0x39,
    RINCRQ               = 0x3A,
    RDECR                = 0x3B,
    RDECRQ               = 0x3C,
    SET_VBUCKET          = 0x3D,
    GET_VBUCKET          = 0x3E,
    DEL_VBUCKET          = 0x3F,
    TAP_CONNECT          = 0x40,
    TAP_MUTATION         = 0x41,
    TAP_DELETE           = 0x42,
    TAP_FLUSH            = 0x43,
    TAP_OPAQUE           = 0x44,
    TAP_VBUCKET_SET      = 0x45,
    TAP_CHECKPOINT_START = 0x46,
    TAP_CHECKPOINT_END   = 0x47
};

export type MemcachedResponseStatus = enum {
    NO_ERROR                          = 0x0000,
    KEY_NOT_FOUND                     = 0x0001,
    KEY_EXISTS                        = 0x0002,
    VALUE_TOO_LARGE                   = 0x0003,
    INVALID_ARGUMENTS                 = 0x0004,
    ITEM_NOT_STORED                   = 0x0005,
    INCR_DECR_ON_NON_NUMERIC_VALUE    = 0x0006,
    VBUCKET_BELONGS_TO_ANOTHER_SERVER = 0x0007,
    AUTHENTICATION_ERROR              = 0x0008,
    AUTHENTICATION_CONTINUE           = 0x0009,
    UNKNOWN_COMMAND                   = 0x0081,
    OUT_OF_MEMORY                     = 0x0082,
    NOT_SUPPORTED                     = 0x0083,
    INTERNAL_ERROR                    = 0x0084,
    BUSY                              = 0x0085,
    TEMPORARY_FAILURE                 = 0x0086
};

export type MemcachedCommand = unit {
    %byteorder = ByteOrder::big;

    magic_code         : uint8 &transform_to(MemcachedMagicCode);
    opcode_binary      : uint8;
    var opcode         : MemcachedOpCode
                           &parse = cast<MemcachedOpCode>(self.opcode_binary)
                           &serialize = if ($$ != MemcachedOpCode::UNDEF) then self.opcode_binary = cast<uint8>($$);
    
    key_len            : uint16;
    extras_len         : uint8;
                       : bytes &length = 1;  # reserved for future use

    switch (self.magic_code) {
        MemcachedMagicCode::REQUEST  -> vbucket_id : uint16;
        MemcachedMagicCode::RESPONSE -> status     : uint16 &transform_to(MemcachedResponseStatus);
    };
    
    total_len          : uint32;
    opaque             : bytes &length = 4;
    cas                : bytes &length = 8;
    
    var value_len      : uint32
                           &parse = self.total_len - (self.extras_len + self.key_len)
                           &serialize = self.total_len = self.key_len + self.extras_len + $$;
    
    extras             : bytes &length = self.extras_len;
    key                : string &length = self.key_len;
    value              : bytes &length = self.value_len;
};