#
# TODO:
#
# - Continued headers
# - decode URIs
# - connection: keep-alive, close
# - software versions
# - multipart bodies
# - partial content
# - head responses (i.e. Content-Length but no body)
#
# - enable/disable support for different features (e.g. chunked content)

module HTTP;

type DeliveryMode = enum { EndOfData, Length, Multipart, Chunked };

const Token      = /[^ \t\r\n]+/;
const URI        = /[^ \t\r\n]+/;
const NewLine    = /\r?\n/;
const RestOfLine = /[^\r\n]*/;
const FullLine   = /[^\r\n]*\r?\n/;
const Integer    = /[0-9]+/;
const HexInteger = /[0-9a-zA-Z]+/;
const WhiteSpace = /[ \t]+/;
const OptionalWhiteSpace = /[ \t]*/;

bool reply_code_needs_body(status: uint64) %{
   return status <= 99 || (status >= 200 && status != 204 && status != 304);
%}

export type Request = unit {
    request: RequestLine;
    message: Message(False, True);
};

export type Reply = unit {
    reply: ReplyLine;
    message: Message(reply_code_needs_body(self.reply.status), False);
};

type Version = unit {
    :        /HTTP\//;
    number:  /[0-9]+\.[0-9]*/;
};

type RequestLine = unit {
    method:  Token;
    :        WhiteSpace;
    uri:     URI;
    :        WhiteSpace;
    version: Version;
    :        NewLine;
};

#transform stringEncodedUint32 <stream, uint32> {
#    ParseResult decode(input: stream*, value: uint32*){
#        return read_ascii_uint32(input, value));
#    }
#    SerializeResult encode(output: stream*, value: uint32*){
#        return write_uint32_as_ascii(output, value);
#    }
#}

type ReplyLine = unit {
    version: Version;
    :        WhiteSpace;
    status:  Integer &transform(stringEncodedUint32);
    :        OptionalWhiteSpace;
    reason:  RestOfLine;
    :        NewLine;
};

type Message = unit(body_default: bool, is_request: bool) {
    headers:    list<Header(self)>;
    end_of_hdr: NewLine;

    var content_length: uint64
      &transform(stringEncodedUint64)
      &parse = (find(self.headers, h => h.name_upper == "CONTENT-LENGTH", h => h.content, None))
      &serialize = (find(self.headers, h => h.name_upper == "CONTENT-LENGTH", h => h.content = $$, None));

    var transfer_encoding: string
      &parse = (find(self.headers, h => h.name_upper == "TRANSFER-ENCODING", h => uppercase(h.content), None))
      &serialize = (find(self.headers, h => h.name_upper == "TRANSFER-ENCODING", h => h.content = $$, None));

    var has_body: bool
      &parse = ((self.content_length && self.content_length > 0) || (self.transfer_encoding));

    var is_request: bool = is_request;
    var delivery_mode: DeliveryMode
      &parse = if (self.content_length && self.content_length > 0) then DeliveryMode::Length
               else if (self.transfer_encoding && self.transfer_encoding == "CHUNKED") then DeliveryMode::Chunked
               else DeliveryMode::EndOfData;

    body:       Body(self, self.delivery_mode) if (self.has_body);
};

const HeaderName  = /[^:\r\n]+/;
const HeaderValue = /[^\r\n]*/;

type Header = unit(msg: Message) {
    name:    HeaderName;
    :        /:[\t ]*/;
    content: HeaderValue;
    :        NewLine;
    
    # name_upper is only derived variable for parsing, not included in serialization
    var name_upper: string &parse=uppercase(self.name);
};

type Body = unit(msg: Message, delivery_mode: DeliveryMode) {
    switch (delivery_mode) {
      DeliveryMode::EndOfData -> : bytes &chunked &eod -> self.data;
      DeliveryMode::Length    -> : bytes &chunked &length=msg.content_length -> self.data;
      DeliveryMode::Chunked   -> : Chunks(self, msg);
    };

    var content: bytes &eod &chunked;
    var content_len: uint64;
    var data: sink &output=self.content &length=self.content_len;
};

type Chunks = unit(body: Body, msg: Message) {
    chunks:   list<Chunk(body)> &transient &parseUntil($$.length == 0);
    trailers: list<Header(msg)> &transient;
    :         NewLine;
};

type Chunk = unit(body: Body) {
    length:    HexInteger &transform(hexStringEncodedUint64);
    :          OptionalWhiteSpace;
    extension: RestOfLine;
    :          NewLine;
    :          bytes &chunked &length=self.length -> body.data;
    :          NewLine if ( self.length != 0 );
};
